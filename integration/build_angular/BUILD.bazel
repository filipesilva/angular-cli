load("//tools/npm_integration_test:npm_integration_test.bzl", "npm_integration_test")

filegroup(
    name = "build_angular_sources",
    srcs = glob(
        include = ["**/*"],
        exclude = [
            "node_modules/**",
            ".yarn_local_cache/**",
        ],
    ),
)

YARN_CACHE_FLAG = "--cache-folder ./.yarn_local_cache"

INTEGRATION_TESTS = [
    "app-shell",
    "browser-1",
    "browser-2",
    "browser-3",
    "browser-4",
    "dev-server",
    "extract-i18n",
    "karma",
    "protractor",
    "server",
    "tslint",
    "browser-1-ve",
    "browser-2-ve",
    "browser-3-ve",
    "browser-4-ve",
    "server-ve",
    "extract-i18n-ve",
]

[
    npm_integration_test(
        name = test_name,
        size = "large",
        check_npm_packages = [
            "@angular-devkit/architect",
            "@angular-devkit/build-angular",
            "@angular-devkit/build-optimizer",
            "@angular-devkit/build-webpack",
            "@angular-devkit/core",
            "@ngtools/webpack",
        ],
        commands = [
            "patch-package-json",
            # Workaround https://github.com/yarnpkg/yarn/issues/2165
            # Yarn will cache file://dist URIs and not update
            "$(rootpath @nodejs//:yarn_bin) cache clean @angular-devkit/architect " + YARN_CACHE_FLAG,
            "$(rootpath @nodejs//:yarn_bin) cache clean @angular-devkit/build-angular " + YARN_CACHE_FLAG,
            "$(rootpath @nodejs//:yarn_bin) cache clean @angular-devkit/build-optimizer " + YARN_CACHE_FLAG,
            "$(rootpath @nodejs//:yarn_bin) cache clean @angular-devkit/build-webpack " + YARN_CACHE_FLAG,
            "$(rootpath @nodejs//:yarn_bin) cache clean @angular-devkit/core " + YARN_CACHE_FLAG,
            "$(rootpath @nodejs//:yarn_bin) cache clean @ngtools/webpack " + YARN_CACHE_FLAG,
            "$(rootpath @nodejs//:yarn_bin) install " + YARN_CACHE_FLAG,
            "$(rootpath @nodejs//:yarn_bin) test-" + test_name,
        ],
        data = [
            "@nodejs//:yarn_bin",
            "@nodejs//:yarn_files",
        ],
        # This test contains a lot of node modules that can take up to 100s to install.
        # Instead of completely isolating the test and the cache, this one is run in-place so it
        # reuses the local node_modules and cache for all tests in this BUILD file.
        debug = True,
        npm_packages = {
            "//packages/angular_devkit/architect:npm_package_archive": "@angular-devkit/architect",
            "//packages/angular_devkit/build_optimizer:npm_package_archive": "@angular-devkit/build-optimizer",
            "//packages/angular_devkit/build_webpack:npm_package_archive": "@angular-devkit/build-webpack",
            "//packages/angular_devkit/build_angular:npm_package_archive": "@angular-devkit/build-angular",
            "//packages/angular_devkit/core:npm_package_archive": "@angular-devkit/core",
            "//packages/ngtools/webpack:npm_package_archive": "@ngtools/webpack",
        },
        # These tests are resource intensive and should not be over-parallized
        # as they will compete for the resources of other parallel tests slowing
        # everything down. Ask Bazel to allocate multiple CPUs for these tests with "cpu:n" tag.
        tags = ["cpu:2"],
        test_files = ":build_angular_sources",
    )
    for test_name in INTEGRATION_TESTS
]
